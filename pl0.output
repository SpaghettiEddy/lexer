Nonterminals useless in grammar

    varDecl
    idents
    constDecl
    constDef
    constDefs
    procDecl
    assignStmt
    callStmt
    beginStmt
    ifStmt
    whileStmt
    readStmt
    writeStmt
    stmts
    condition
    oddCondition
    relOpCondition
    expr
    relOp
    term
    factor
    posSign


Terminals unused in grammar

    identsym
    numbersym
    "+"
    "-"
    "*"
    "/"
    ";"
    "="
    ","
    ":="
    "const"
    "var"
    "procedure"
    "call"
    "begin"
    "end"
    "if"
    "then"
    "else"
    "while"
    "do"
    "read"
    "write"
    "odd"
    "<>"
    "<"
    "<="
    ">"
    ">="
    "("
    ")"


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty

    4 varDecls: empty

    5 procDecls: empty

    6 empty: ε

    7 stmt: skipStmt

    8 skipStmt: "skip"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258)
    numbersym <number> (259)
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262)
    "/" <token> (263)
    "." <token> (264) 1
    ";" <token> (265)
    "=" <token> (266)
    "," <token> (267)
    ":=" <token> (268)
    "const" <token> (269)
    "var" <token> (270)
    "procedure" <token> (271)
    "call" <token> (272)
    "begin" <token> (273)
    "end" <token> (274)
    "if" <token> (275)
    "then" <token> (276)
    "else" <token> (277)
    "while" <token> (278)
    "do" <token> (279)
    "read" <token> (280)
    "write" <token> (281)
    "skip" <token> (282) 8
    "odd" <token> (283)
    "<>" <token> (284)
    "<" <token> (285)
    "<=" <token> (286)
    ">" <token> (287)
    ">=" <token> (288)
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1
    constDecls <const_decls> (39)
        on left: 3
        on right: 2
    varDecls <var_decls> (40)
        on left: 4
        on right: 2
    procDecls <proc_decls> (41)
        on left: 5
        on right: 2
    empty <empty> (42)
        on left: 6
        on right: 3 4 5
    stmt <stmt> (43)
        on left: 7
        on right: 2
    skipStmt <skip_stmt> (44)
        on left: 8
        on right: 7


State 0

    0 $accept: • program $end

    $default  reduce using rule 6 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block • "."

    "."  shift, and go to state 6


State 3

    2 block: constDecls • varDecls procDecls stmt

    $default  reduce using rule 6 (empty)

    varDecls  go to state 7
    empty     go to state 8


State 4

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 7

    2 block: constDecls varDecls • procDecls stmt

    $default  reduce using rule 6 (empty)

    procDecls  go to state 9
    empty      go to state 10


State 8

    4 varDecls: empty •

    $default  reduce using rule 4 (varDecls)


State 9

    2 block: constDecls varDecls procDecls • stmt

    "skip"  shift, and go to state 11

    stmt      go to state 12
    skipStmt  go to state 13


State 10

    5 procDecls: empty •

    $default  reduce using rule 5 (procDecls)


State 11

    8 skipStmt: "skip" •

    $default  reduce using rule 8 (skipStmt)


State 12

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 13

    7 stmt: skipStmt •

    $default  reduce using rule 7 (stmt)
